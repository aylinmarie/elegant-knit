import PropTypes from "prop-types";
import React, { useCallback, useEffect, useMemo, useState } from "react";
var DEFAULT_COLUMNS_COUNT = 1;

var useHasMounted = function useHasMounted() {
  var _useState = useState(false),
      hasMounted = _useState[0],
      setHasMounted = _useState[1];

  useEffect(function () {
    setHasMounted(true);
  }, []);
  return hasMounted;
};

var useWindowWidth = function useWindowWidth() {
  var hasMounted = useHasMounted();

  var _useState2 = useState(0),
      width = _useState2[0],
      setWidth = _useState2[1];

  var handleResize = useCallback(function () {
    if (!hasMounted) return;
    setWidth(window.innerWidth);
  }, [hasMounted]);
  useEffect(function () {
    if (hasMounted) {
      window.addEventListener("resize", handleResize);
      handleResize();
      return function () {
        return window.removeEventListener("resize", handleResize);
      };
    }
  }, [hasMounted, handleResize]);
  return width;
};

var MasonryResponsive = function MasonryResponsive(_ref) {
  var columnsCountBreakPoints = _ref.columnsCountBreakPoints,
      children = _ref.children,
      className = _ref.className,
      style = _ref.style;
  var windowWidth = useWindowWidth();
  var columnsCount = useMemo(function () {
    var breakPoints = Object.keys(columnsCountBreakPoints).sort(function (a, b) {
      return a - b;
    });
    var count = breakPoints.length > 0 ? columnsCountBreakPoints[breakPoints[0]] : DEFAULT_COLUMNS_COUNT;
    breakPoints.forEach(function (breakPoint) {
      if (breakPoint < windowWidth) {
        count = columnsCountBreakPoints[breakPoint];
      }
    });
    return count;
  }, [windowWidth, columnsCountBreakPoints]);
  return /*#__PURE__*/React.createElement("div", {
    className: className,
    style: style
  }, React.Children.map(children, function (child, index) {
    return React.cloneElement(child, {
      key: index,
      columnsCount: columnsCount
    });
  }));
};

MasonryResponsive.propTypes = process.env.NODE_ENV !== "production" ? {
  children: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.node), PropTypes.node]).isRequired,
  columnsCountBreakPoints: PropTypes.object,
  className: PropTypes.string,
  style: PropTypes.object
} : {};
MasonryResponsive.defaultProps = {
  columnsCountBreakPoints: {
    350: 1,
    750: 2,
    900: 3
  },
  className: null,
  style: null
};
export default MasonryResponsive;